generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(cuid())
  role      ROLE
  selfie    String
  phoneNum  String @unique
  latitude  Float
  longitude Float

  // DONOR Specific
  tweets    Tweet[]
  bookmarks Application[] @relation("Bookmarks")
  donations Application[] @relation("Donations")
  followers User[]        @relation("Followers")
  following User[]        @relation("Followers")

  // ACCEPTOR Specific
  applications Application[] @relation("ZakaatApplications")

  // VERIFIER Specific
  verifiedApplications Application[] @relation("ApplicationVerification")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id                   String  @id @default(cuid())
  authorId             String
  amount               Int
  reason               String
  status               STATUS
  hide                 Boolean @default(false)
  rating               Int
  bookmarkedByDonorId  String?
  donatedByDonorId     String?
  verifiedByVerifierId String?

  bookmarkedBy User? @relation("Bookmarks", fields: [bookmarkedByDonorId], references: [id])
  donatedBy    User? @relation("Donations", fields: [donatedByDonorId], references: [id])
  verifiedBy   User? @relation("ApplicationVerification", fields: [verifiedByVerifierId], references: [id])
  author       User  @relation("ZakaatApplications", fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tweet {
  id            String @id @default(cuid())
  text          String
  tweetAuthorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TweetedBy User @relation(fields: [tweetAuthorId], references: [id], onDelete: Cascade)
}

enum STATUS {
  CREATED
  DONATED
  VERIFIED
  BOOKMARKED
}

enum ROLE {
  ADMIN
  DONOR
  ACCEPTOR
  VERIFIER
}
